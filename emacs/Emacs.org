#+title Emacs Configuration
#+PROPERTY: header-args :tangle ./init.el

* Debug
#+begin_src emacs-lisp
  ;; https://emacs.stackexchange.com/questions/74289/emacs-28-2-error-in-macos-ventura-image-type-invalid-image-type-svg
  (add-to-list 'image-types 'svg)

  ;; For debugging purposes
  (setq use-package-verbose t)
#+end_src
* Package Management
** Straight.el
#+begin_src emacs-lisp
  (defvar bootstrap-version)
  (let ((bootstrap-file (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
        (bootstrap-version 6))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))

#+end_src
** use-package
#+begin_src emacs-lisp
  (straight-use-package 'use-package) 
  (setq straight-use-package-by-default t)

#+end_src
* UI Configuration
** Basic
#+begin_src emacs-lisp
  (setq inhibit-startup-message t)

  (scroll-bar-mode -1)          ; Disable visible scrollbar
  (tool-bar-mode -1)            ; Disable the toolbar
  (tooltip-mode -1)             ; Disable the tooltips
  (set-fringe-mode 10)          ; Give some breathing room
  (setq scroll-margin 10)       ; auto scroll
  (setq scroll-step 1)          ; auto scroll amount

  (menu-bar-mode -1)            ; Disable the menu bar

  (setq ring-bell-function
        (lambda ()
          (let ((orig-bg (face-background 'mode-line)))
            (set-face-background 'mode-line "red4")
            (run-with-idle-timer 0.1 nil
                                 (lambda (bg) (set-face-background 'mode-line bg))
                                 orig-bg))))

#+end_src
** Font configuration
#+begin_src emacs-lisp
  (set-face-attribute 'default nil :font "fira code retina" :height 170)
#+end_src
** Theme configuration
#+begin_src emacs-lisp
  (use-package doom-themes
    :init (load-theme 'doom-one t))

  ;; NOTE: The first time loading the configuration on a new machine, you would need to run the following command
  ;; M-x all-the-icons-install-fonts
  (use-package all-the-icons)

  (use-package doom-modeline
    :init
    (doom-modeline-mode 1)
    (setq doom-modeline-height 40))
#+end_src
** Line numbering
#+begin_src emacs-lisp
  ;; Line numbering
  (column-number-mode)                      ; Display current line or column
  (global-display-line-numbers-mode t)
  (setq display-line-numbers 'relative)
  (setq display-line-numbers-width 3)

  ;; Disable line numbers for some modes
  (dolist (mode '(org-mode-hook
                  term-mode-hook
                  shell-mode-hook
                  eshell-mode-hook
                  treemacs-mode-hook
                  mu4e-main-mode-hook
                  mu4e-headers-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))

  (add-hook 'mu4e-headers-mode-hook (lambda () (setq-local line-spacing 0.7)))
#+end_src
** Window
#+begin_src emacs-lisp
  ;; Change window bar appearance in emacs
  (add-to-list 'default-frame-alist '(ns-transparent-titlebar . t))
  (add-to-list 'default-frame-alist '(ns-appearance . dark)) 
#+end_src
** Dashboard
#+begin_src emacs-lisp 
  (use-package dashboard
    :init
    (setq dashboard-startup-banner 'logo)
    (setq dashboard-items '((recents  . 5)
                            (projects . 5)
                            (agenda . 5)))
    (dashboard-setup-startup-hook))
#+end_src
** Perspective
#+begin_src emacs-lisp 

#+end_src

* Keybindings
** ESC Cancels All
#+begin_src emacs-lisp
  ;; Make ESC quit prompts
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
#+end_src
** MacOS
#+begin_src emacs-lisp
  (setq mac-command-modifier 'control)
#+end_src
** Evil
#+begin_src emacs-lisp
  (use-package evil
    :init
    (setq evil-want-integration t)     ; Integrate Evil with other modules 
    (setq evil-want-keybinding nil)
    (setq evil-undo-system 'undo-tree)
    (evil-mode 1)
    (evil-global-set-key 'motion "j" 'evil-next-visual-line)
    (evil-global-set-key 'motion "k" 'evil-previous-visual-line)
    (evil-global-set-key 'motion "0" 'evil-beginning-of-visual-line)

    )

  (use-package evil-collection
    :after evil
    :config
    (setq forge-add-default-bindings nil)
    (evil-collection-init))
    #+end_src
** Hydra
#+begin_src emacs-lisp
  (use-package hydra)
#+end_src
*** Text
#+begin_src emacs-lisp
  (defhydra hydra-text-scale (:timeout 4)
    ("j" text-scale-increase "in")
    ("k" text-scale-decrease "out")
    ("f" nil "finished" :exit t))
#+end_src
*** Window Scale
#+begin_src emacs-lisp
  (defhydra hydra-window-nav (:timeout 4)
    ("h" evil-window-decrease-width "shrink horizontally" :column "Sizing")
    ("H" evil-window-increase-width "enlarge horizontally")
    ("v" evil-window-decrease-height "shrink vertically")
    ("V" evil-window-increase-height "enlarge vertically")
    ("b" balance-windows "balance window height")
    ("m" maximize-window "maximize current window")
    ("M" minimize-window "minimize current window"))
#+end_src
** General
#+begin_src emacs-lisp
  (use-package general
    :config
    (general-create-definer jongmin/leader-keys
      :keymaps '(normal visual emacs eww)
      :prefix "SPC"))
#+end_src
** Leader
#+begin_src emacs-lisp
  (jongmin/leader-keys
    "d" '(:ignore d  :which-key "directory")
    "dt" '(treemacs  :which-key "tree")
    "dl" '(lsp-treemacs-symbols  :which-key "lsp-tree")
    "s" '(:ignore s :which-key "scale")
    "st" '(hydra-text-scale/body :which-key "scale text")
    "sw"  '(hydra-window-nav/body :which-key "window management"))
#+end_src
* Org Mode
** Tangle-on-Save
Registers hook to tangle Emacs.org to init.el on save
#+begin_src emacs-lisp
  (defun jongmin/org-babel-tangle-config ()
    (when (string-equal (buffer-file-name)
			(expand-file-name "~/dotfiles/emacs/Emacs.org"))
      (let ((org-confirm-babel-evaluate nil))
	(org-babel-tangle))))

  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook          #'jongmin/org-babel-tangle-config)))
#+end_src
** Core
*** Basic
#+begin_src emacs-lisp
  (defun jongmin/org-mode-setup ()
    (org-indent-mode)
    (visual-line-mode 1)) ; auto-wrap

  (use-package org
    :hook (org-mode . jongmin/org-mode-setup)
    :config
    (require 'org-habit)
    (add-to-list 'org-modules 'org-habit)
    (setq org-refile-targets
	  '(("Archive.org" :maxlevel . 1)
	    ("Tasks.org" :maxlevel . 1)))
    ;; Save org buffers after refiling
    (advice-add 'org-refile :after 'org-save-all-org-buffers)
    (setq org-agenda-files
	  '("~/org/agenda/Tasks.org"
	    "~/org/agenda/Birthdays.org"
	    "~/org/agenda/Habits.org"))

    (setq org-agenda-start-with-log-mode t)
    (setq org-log-done 'time)
    (setq org-log-into-drawer t)
    (setq org-ellipsis " ▾")
    (setq org-capture-templates
	  `(("t" "Tasks / Projects")
	    ("tt" "Task" entry (file+olp "~/org/agenda/Tasks.org" "Inbox")
	     "* TODO %?\n  %U\n  %a\n  %i" :empty-lines 1)))
    (plist-put org-format-latex-options :scale 2)
    )
#+end_src
*** Bullets
#+begin_src emacs-lisp
  (use-package org-bullets
    :hook (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))
#+end_src
*** Visual Fill 
#+begin_src emacs-lisp
  (defun jongmin/org-mode-visual-fill ()
    (setq visual-fill-column-width 100
	  visual-fill-column-center-text t)
    (visual-fill-column-mode 1))

  (use-package visual-fill-column
    :hook (org-mode . jongmin/org-mode-visual-fill))
#+end_src
** Roam
#+begin_src emacs-lisp
  (use-package org-roam
    :hook org
    :custom 
    (org-roam-directory "~/RoamNotes/")
    (setq org-roam-dailies-directory "journal/")
    :config
    (org-roam-setup)
    )

  (use-package org-roam-ui
    :after org-roam
    :config
    (setq org-roam-ui-sync-theme t
          org-roam-ui-follow t
          org-roam-ui-update-on-save t
          org-roam-ui-open-on-start t))

#+end_src
** Leader Key
#+begin_src emacs-lisp
  (jongmin/leader-keys
    "o" '(:ignore o :which-key "org")
    "oa" '(org-agenda-list :which-key "org agenda")
    "on" '(org-roam-node-find :which-key "org roam node find")
    "oi" '(org-roam-node-insert :which-key "org roam node insert")
    "oc" '(org-capture :which-key "org capture")
    "og" '(org-roam-tag-add :which-key "org tag add")
    "ot" '(lambda() (interactive)(find-file "~/org/agenda/Tasks.org") :which-key "org tasks")
    "od" '(lambda() (interactive)(find-file "~/dotfiles/emacs/Emacs.org") :which-key "org configuration")
    "oj" '(:ignore oj :which-key "org journal")
    "ojt" '(org-roam-dailies-capture-today :which-key "today")
    "ojg" '(:ignore ojg :which-key "org journal goto")
    "ojgt" '(org-roam-dailies-goto-today :which-key "today")
    )
#+end_src
* File Management
** Backup files
#+begin_src emacs-lisp
  ;; create the autosave dir if necessary, since emacs won't.
					  ;(make-directory "~/.emacs.d/autosaves/" t)
  (setq backup-by-copying t      ; don't clobber symlinks
	backup-directory-alist '(("." . "~/.emacs.d/backups/"))    ; don't litter my fs tree
	delete-old-versions t
	kept-new-versions 6
	kept-old-versions 2
	version-control t)       ; use versioned backups
  (setq auto-save-file-name-transforms
	`((".*" "~/.emacs.d/autosaves/" t)))
#+end_src
** Undo Tree
#+begin_src emacs-lisp
  (use-package undo-tree
    :config
    (global-undo-tree-mode 1)
    (define-key undo-tree-map (kbd "C-/") nil)
    (setq undo-tree-visualizer-diff t)
    (setq undo-tree-history-directory-alist '(("." . "~/.emacs.d/undo")))
    )
  (jongmin/leader-keys
    "fu" '(undo-tree-visualize :which-key "undo tree"))
#+end_src
** Dired
#+begin_src emacs-lisp
  (use-package dired
    :straight nil
    :commands (dired dired-jump)
    :bind (("C-x C-j" . dired-jump))
    :config
    (require 'dired-x)

    ;; Move delete files to the Trash
    (setq delete-by-moving-to-trash t)
    (setq trash-directory "~/.Trash")

    (evil-collection-define-key 'normal 'dired-mode-map
      "h" 'dired-single-up-directory
      "l" 'dired-single-buffer)
    )

  (use-package dired-single)

  (use-package all-the-icons-dired
    :hook (dired-mode . all-the-icons-dired-mode))

  (use-package dired-hide-dotfiles
    :hook (dired-mode . dired-hide-dotfiles-mode)
    :config
    (evil-collection-define-key 'normal 'dired-mode-map
      "H" 'dired-hide-dotfiles-mode))

#+end_src
* Programming
** Delimeters UI
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))
#+end_src
** Commenting
#+begin_src emacs-lisp
  (use-package evil-nerd-commenter
    :bind ("C-/" . evilnc-comment-or-uncomment-lines))
#+end_src
** Git
*** Magit
#+begin_src emacs-lisp
  (use-package magit
    :commands magit-status)
#+end_src
*** Forge
#+begin_src emacs-lisp
  ;; token stored in plaintext in ~/.authinfo
  (use-package forge
    :after magit)
#+end_src
*** Git Gutter
#+begin_src emacs-lisp
  (use-package git-gutter
    :straight git-gutter-fringe
    :diminish
    :hook ((text-mode . git-gutter-mode)
           (prog-mode . git-gutter-mode)))
#+end_src
*** Leader
#+begin_src emacs-lisp
  (jongmin/leader-keys
    "g" '(:ignore g :which-key "git")
    "gs" '(magit-status :which-key "status")

    "gg" '(:ignore gg :which-key "git gutter")
    "ggn" '('git-gutter:next-hunk :which-key "next")
    "ggp" '('git-gutter:previous-hunk :which-key "previous")
    "ggr" '('git-gutter:revert-hunk :which-key "revert")

    "gm" '(:ignore gm :which-key "git smerge")
    "gmr" '(smerge-refine :which-key "refine")
    "gmb" '(smerge-keep-base :which-key "keep base")
    "gml" '(smerge-keep-lower :which-key "keep lower")
    "gmu" '(smerge-keep-upper :which-key "keep upper")
    "gmn" '(smerge-next :which-key "next")
    )
#+end_src
** LSP
*** Core
#+begin_src emacs-lisp
  (use-package lsp-mode
    :commands (lsp lsp-deferred)
    :config
    ;; Defaults to improve performance
    ;; https://emacs-lsp.github.io/lsp-mode/page/performance/
    (setq gc-cons-threshold 100000000)
    (setq read-process-output-max (* 1024 1024)) ;; 1mb

    (setq lsp-lens-enable nil)
    (setq lsp-enable-snippet nil)
    (setq lsp-enable-which-key-integration t)
    ;; For performance, need to enable this
    ;; https://github.com/emacs-lsp/lsp-mode/issues/2709
    ;; (setq lsp-log-io t)

    (lsp-register-client
     (make-lsp-client :new-connection (lsp-tramp-connection "clangd")
                      :major-modes '(c-mode c++-mode)
                      :remote? t
                      :add-on? t
                      :server-id 'clangd-remote))
    )

    (add-hook 'prog-mode-hook 'lsp)

  (use-package flycheck
    :hook lsp-mode
    :init (global-flycheck-mode))

  (use-package flycheck-clang-tidy
    :after flycheck
    :hook
    (flycheck-mode . flycheck-clang-tidy-setup)
    )

  ;; Show informations of the symbols on the current line
  (use-package lsp-ui
    :hook (lsp-mode . lsp-ui-mode)
    :config
    (setq lsp-ui-sideline-show-hover t)
    ;; (setq lsp-ui-sideline-show-code-actions t)
    (setq lsp-ui-sideline-show-diagnostics t)
    (setq lsp-ui-doc-enable t)
    )

  (jongmin/leader-keys
    "l"  '(:ignore t :which-key "lsp")
    "lf" 'lsp-find-definition
    "lc" 'lsp-find-declaration
    "lr" 'lsp-rename
    "ls" 'counsel-imenu
    "le" 'lsp-treemacs-errors-list
    "la" 'lsp-execute-code-action
    "lh" 'lsp-treemacs-call-hierarchy
    "lp"  '(:ignore t :which-key "lsp peek")
    "lpr" 'lsp-ui-peek-find-references
    )
#+end_src
*** C/C++
#+begin_src emacs-lisp
#+end_src
*** Rust
#+begin_src emacs-lisp
  (use-package rust-mode)
#+end_src
*** C#
#+begin_src emacs-lisp
  (use-package csharp-mode)
  (setq lsp-csharp-omnisharp-roslyn-binary-path "/usr/local/bin/omnisharp")
#+end_src
*** Code Completion
#+begin_src emacs-lisp
  (use-package company
    :after lsp-mode
    :hook (lsp-mode . company-mode)
    :bind (:map company-active-map
		("<tab>" . company-complete-selection))
    (:map lsp-mode-map
	  ("<tab>" . company-indent-or-complete-common)))

  ;; company frontend with icons
  (use-package company-box
    :hook (company-mode . company-box-mode))

#+end_src
*** DAP
#+begin_src emacs-lisp
  (use-package dap-mode
    :hook lsp-mode
    :config
    (require 'dap-gdb-lldb)
    (dap-gdb-lldb-setup)

    (defun dap-debug-create-or-edit-json-template ()
      "Edit the C++ debugging configuration or create + edit if none exists yet."
      (interactive)
      (let ((filename (concat (lsp-workspace-root) "/launch.json"))
            (default "~/.emacs.d/default-launch.json"))
        (unless (file-exists-p filename)
          (copy-file default filename))
        (find-file-existing filename))))

  (jongmin/leader-keys
    "d" '(:ignore t :which-key "debugger")
    "dd" 'dap-debug
    "db" '(:ignore t :which-key "breakpoint")
    "dba" 'dap-breakpoint-add
    "dbd" 'dap-breakpoint-delete
    "dbl" 'dap-ui-breakpoints-list)
#+end_src
** TRAMP
#+begin_src emacs-lisp
  (use-package tramp
    :straight nil)

  (use-package docker-tramp
    :after tramp)
#+end_src
** Directory
#+begin_src emacs-lisp
  (use-package treemacs
    :defer t
    :config
    (treemacs-project-follow-mode t)
    (treemacs-follow-mode t)
    (treemacs-filewatch-mode t)
    (setq treemacs--project-follow-delay 0.1)
    (setq treemacs-file-follow-delay 0.1)
    (setq treemacs-project-follow-cleanup t)
    (setq treemacs-follow-after-init t)
    )

  (use-package treemacs-projectile
    :after (treemacs projectile))

  (use-package lsp-treemacs
    :after lsp
    :config (lsp-treemacs-sync-mode 1))

#+end_src
** Projectile
#+begin_src emacs-lisp
  (use-package projectile
    :init
    (projectile-mode 1)
    (when (file-directory-p "~/Developer")
      (setq projectile-project-search-path '("~/Developer"))))

  (use-package counsel-projectile
    :after projectile
    :config
    (counsel-projectile-mode))

  (jongmin/leader-keys
    "p" '(projectile-command-map :which-key "project"))
#+end_src
* Ivy
#+begin_src emacs-lisp
  (use-package ivy
    :diminish
    :bind (("C-s" . swiper)
           :map ivy-minibuffer-map
           ("TAB" . ivy-alt-done)
           ("C-j" . ivy-next-line)
           ("C-k" . ivy-previous-line)
           )
    :init
    (counsel-mode t)
    (ivy-mode 1))

  (jongmin/leader-keys
    "b" '(:ignore t :which-key "buffer")
    "bs" 'counsel-switch-buffer)

  ;; Adds information to switch-buffer and other ivy commands
  (use-package ivy-rich
    :after ivy
    :config
    (ivy-rich-mode 1))

  ;; Enables the ivy screen to be positioned centered
  (use-package ivy-posframe
    :after ivy
    :custom
    (ivy-posframe-width      115)
    (ivy-posframe-min-width  115)
    (ivy-posframe-height     10)
    (ivy-posframe-min-height 10)
    :config
    (setq ivy-posframe-display-functions-alist '((t . ivy-posframe-display-at-frame-center))) ;; (setq ivy-posframe-parameters '((internal-border-width . 10)
    ;;                                 (min-width . 90)
    ;;                                 (min-height . 20)
    ;;                                 (left-fringe . 10)
    ;;                                 (right-fringe . 10)
    ;;                                 (transparency . (85 . 85))))
    (setq ivy-posframe-parameters '((parent-frame . nil)
                                    (left-fringe . 8)
                                    (right-fringe . 8)
                                    (alpha . 90)
                                    ))
    (ivy-posframe-mode 1))
#+end_src
* Help
** Keybinding help
#+begin_src emacs-lisp
  (use-package which-key
    :defer 0 
    :config 
    (which-key-mode)
    (setq which-key-idle-delay 0.3))
#+end_src
* Email
** mu4e
requires mu, isync, msmtp

#+begin_src emacs-lisp
  (use-package mu4e
    :straight nil
    :defer 4
    :load-path  "/Users/jongmin/Developer/mu/mu4e"
    ;; :commands mu4e
    :config
    (setq shr-color-visible-luminance-min 80)

    (add-to-list 'mu4e-header-info-custom
                 '(:empty . (:name "Empty"
                                   :shortname ""
                                   :function (lambda (msg) "  "))))


    (setq mu4e-headers-fields 
          '(
            (:empty       .   2)
            (:from        .  22)
            (:human-date  .  10)
            (:subject     . nil)
            ))

    (custom-set-faces
     '(mu4e-header-face ((t (:family "San Serif" :height 180))))
     '(mu4e-unread-face ((t (:family "San Serif" :foreground "DeepSkyBlue3" :height 180))))
     '(mu4e-header-highlight-face ((t (:background "gray35" :height 180 :family "San Serif"))))
     )

    (setq mu4e-headers-precise-alignment t)

    (setq truncate-string-ellipsis "...")

    ;; we installed this with homebrew
    (setq mu4e-mu-binary (executable-find "mu"))

    ;; this is the directory we created before:
    (setq mu4e-maildir "~/.maildir")

    ;; this command is called to sync imap servers:
    (setq mu4e-get-mail-command (concat (executable-find "mbsync") " -a"))
    ;; how often to call it in seconds:
    (setq mu4e-update-interval 300)
    ;; save attachment to desktop by default
    ;; or another choice of yours:
    (setq mu4e-attachment-dir "~/Desktop")

    ;; rename files when moving - needed for mbsync:
    (setq mu4e-change-filenames-when-moving t)

    (setq mu4e-compose-format-flowed t)

    (setq jm/mu4e-inbox-query
          "(maildir:/personal/INBOX OR maildir:/seas/INBOX) AND flag:unread")

    ;; https://github.com/djcb/mu/issues/1136
    ;; Setting the T mark on gmail doesn't work
    (setf (alist-get 'trash mu4e-marks)
          (list :char '("d" . "▼")
                :prompt "dtrash"
                :dyn-target (lambda (target msg)
                              (mu4e-get-trash-folder msg))
                :action (lambda (docid msg target)
                          ;; Here's the main difference to the regular trash mark,
                          ;; no +T before -N so the message is not marked as
                          ;; IMAP-deleted:
                          (mu4e--server-move docid (mu4e--mark-check-target target) "-N"))))

    (setq message-send-mail-function 'smtpmail-send-it)

    (setq mu4e-contexts
          (list
           ;; Work account
           (make-mu4e-context
            :name "Personal"
            :match-func
            (lambda (msg)
              (when msg
                (string-prefix-p "/personal" (mu4e-message-field msg :maildir))))
            :vars '((user-mail-address . "01jongminchoi@gmail.com")
                    (user-full-name    . "Jong Min Choi")
                    (smtpmail-smtp-server . "smtp.gmail.com")
                    (smtpmail-smtp-service . "465")
                    (smtpmail-stream-type . ssl)
                    (mu4e-drafts-folder  . "/personal/[Gmail].Drafts")
                    (mu4e-sent-folder  . "/personal/[Gmail].Sent Mail")
                    (mu4e-refile-folder  . "/personal/[Gmail].All Mail")
                    (mu4e-trash-folder  . "/personal/[Gmail].Trash")))

           ;; seas account
           (make-mu4e-context
            :name "seas"
            :match-func
            (lambda (msg)
              (when msg
                (string-prefix-p "/seas" (mu4e-message-field msg :maildir))))
            :vars '((user-mail-address . "jongmin@seas.upenn.edu")
                    (user-full-name    . "Jong Min Choi")
                    (smtpmail-smtp-server . "smtp.gmail.com")
                    (smtpmail-smtp-service . "465")
                    (smtpmail-stream-type . ssl)
                    (mu4e-drafts-folder  . "/seas/[Gmail].Drafts")
                    (mu4e-sent-folder  . "/seas/[Gmail].Sent Mail")
                    (mu4e-refile-folder  . "/seas/[Gmail].All Mail")
                    (mu4e-trash-folder  . "/seas/[Gmail].Trash")
                    (mu4e-maildir-shortcuts . ( ("/seas/[Gmail].All Mail"  . ?a)
                                                ("/seas/[Gmail].Trash"       . ?t)))

                    ))))


    (defun jm/go-to-inbox ()
      (interactive)
      (mu4e-headers-search jm/mu4e-inbox-query))


    (add-to-list 'mu4e-bookmarks
                 '(:name  "Unread Inbox"
                   :query "(maildir:/personal/INBOX OR maildir:/seas/INBOX) AND flag:unread"
                   :key   ?i))

    (add-to-list 'mu4e-bookmarks
                 '(:name  "Combined Inbox"
                   :query "(maildir:/personal/INBOX OR maildir:/seas/INBOX)" 
                   :key   ?c))

    (setq mu4e-maildir-shortcuts
          '(("/pesonal/Inbox"             . ?i)
            ("/personal/[Gmail].Sent Mail" . ?s)
            ("/personal/[Gmail].Trash"     . ?t)
            ("/personal/[Gmail].Drafts"    . ?d)
            ("/personal/[Gmail].All Mail"  . ?a)))

    (setq mu4e-context-policy 'pick-first)

    (jongmin/leader-keys
      "m" '(:ignore m :which-key "mu4e")
      "mu" '(mu4e :which-key "open mu4e")
      "mi" 'jm/go-to-inbox
      "ms" 'mu4e-update-mail-and-index)

    (mu4e t)
    )

#+end_src
** Alert
#+begin_src emacs-lisp
  ;; "maildir:/seas/INBOX AND flag:unread")
  ;; "flag:unread")
  (use-package mu4e-alert
    :after mu4e
    :config 
    (setq mu4e-alert-interesting-mail-query jm/mu4e-inbox-query)

    (setq mu4e-alert-notify-repeated-mails nil)

    (mu4e-alert-set-default-style 'osx-notifier)
    (mu4e-alert-enable-mode-line-display)
    (mu4e-alert-enable-notifications)
    )

  ;; (add-hook 'after-init-hook #'mu4e-alert-enable-mode-line-display)
#+end_src
** mu4e-views
#+begin_src emacs-lisp
  ;; (use-package mu4e-views
  ;;   :straight (mu4e-views :type git :host github :repo "lordpretzel/mu4e-views" :branch "mu-1.8-support")
  ;;   :after mu4e
  ;;   :bind (:map mu4e-headers-mode-map
  ;;               ("C-j" . mu4e-views-cursor-msg-view-window-down) ;; from headers window scroll the email view
  ;;               ("C-k" . mu4e-views-cursor-msg-view-window-up) ;; from headers window scroll the email view
  ;;               )
  ;;   :config
  ;;   (setq mu4e-views-auto-view-selected-message t)
  ;;   (setq mu4e-views-default-view-method "html") ;; make xwidgets default
  ;;   (mu4e-views-mu4e-use-view-msg-method "html") ;; select the default
  ;;   )

#+end_src

** mu4e-thread-folding
#+begin_src emacs-lisp
  ;; (use-package mu4e-thread-folding
  ;;   :straight (mu4e-thread-folding :type git :host github :repo "rougier/mu4e-thread-folding")
  ;;   :after mu4e
  ;;   :config
  ;;   (define-key mu4e-headers-mode-map (kbd "<tab>")     'mu4e-headers-toggle-at-point)
  ;;   (define-key mu4e-headers-mode-map (kbd "<left>")    'mu4e-headers-fold-at-point)
  ;;   (define-key mu4e-headers-mode-map (kbd "<S-left>")  'mu4e-headers-fold-all)
  ;;   (define-key mu4e-headers-mode-map (kbd "<right>")   'mu4e-headers-unfold-at-point)
  ;;   (define-key mu4e-headers-mode-map (kbd "<S-right>") 'mu4e-headers-unfold-all)
  ;;   )
#+end_src
* Terminal Mode
** term-mode
#+begin_src emacs-lisp
    (use-package term
      :commands term
      :config
      (setq explicit-shell-file-name "bash"))
#+end_src

* RSS Feed
** elfeed
#+begin_src emacs-lisp
  (use-package elfeed
    :commands elfeed 
    :config
    (setq elfeed-feeds
          '("https://gadallon.substack.com/feed")))
#+end_src
